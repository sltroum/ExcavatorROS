// Generated by gencpp from file exp_excavator/Jacobian.msg
// DO NOT EDIT!


#ifndef EXP_EXCAVATOR_MESSAGE_JACOBIAN_H
#define EXP_EXCAVATOR_MESSAGE_JACOBIAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exp_excavator
{
template <class ContainerAllocator>
struct Jacobian_
{
  typedef Jacobian_<ContainerAllocator> Type;

  Jacobian_()
    : Jacobian()  {
    }
  Jacobian_(const ContainerAllocator& _alloc)
    : Jacobian(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Jacobian_type;
  _Jacobian_type Jacobian;




  typedef boost::shared_ptr< ::exp_excavator::Jacobian_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exp_excavator::Jacobian_<ContainerAllocator> const> ConstPtr;

}; // struct Jacobian_

typedef ::exp_excavator::Jacobian_<std::allocator<void> > Jacobian;

typedef boost::shared_ptr< ::exp_excavator::Jacobian > JacobianPtr;
typedef boost::shared_ptr< ::exp_excavator::Jacobian const> JacobianConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exp_excavator::Jacobian_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exp_excavator::Jacobian_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exp_excavator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'exp_excavator': ['/home/d-lab/ExcavatorROS.git/src/exp_excavator/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exp_excavator::Jacobian_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exp_excavator::Jacobian_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exp_excavator::Jacobian_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exp_excavator::Jacobian_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exp_excavator::Jacobian_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exp_excavator::Jacobian_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exp_excavator::Jacobian_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a2548826baa65273568a06e13730e1b";
  }

  static const char* value(const ::exp_excavator::Jacobian_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a2548826baa6527ULL;
  static const uint64_t static_value2 = 0x3568a06e13730e1bULL;
};

template<class ContainerAllocator>
struct DataType< ::exp_excavator::Jacobian_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exp_excavator/Jacobian";
  }

  static const char* value(const ::exp_excavator::Jacobian_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exp_excavator::Jacobian_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] Jacobian \n\
";
  }

  static const char* value(const ::exp_excavator::Jacobian_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exp_excavator::Jacobian_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Jacobian);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Jacobian_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exp_excavator::Jacobian_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exp_excavator::Jacobian_<ContainerAllocator>& v)
  {
    s << indent << "Jacobian[]" << std::endl;
    for (size_t i = 0; i < v.Jacobian.size(); ++i)
    {
      s << indent << "  Jacobian[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Jacobian[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXP_EXCAVATOR_MESSAGE_JACOBIAN_H
