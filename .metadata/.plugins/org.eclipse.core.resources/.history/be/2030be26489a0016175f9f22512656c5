#include <ros/ros.h>
#include <sensor_msgs/JointState.h>

int main(int argc, char argv) {
	rosinit(argc, argv, state_publisher);
	rosNodeHandle n;
	rosPublisher joint_pub = n.advertisesensor_msgsJointState(joint_states, 1);
	rosRate loop_rate(30);

	// robot state
	// double tilt = 0, tinc = degree, swivel = 0, angle = 0, height = 0, hinc = 0.005;

	// message declarations
	//geometry_msgsTransformStamped odom_trans;
	sensor_msgsJointState joint_state;
	//odom_trans.header.frame_id = odom;
	//odom_trans.child_frame_id = axis;

	while (ros::ok()) {
		//update joint_state
		joint_state.header.stamp = rosTimenow();
		joint_state.name.resize(3);
		joint_state.position.resize(3);
		joint_state.name[0] = swivel;
		joint_state.position[0] = swivel;
		joint_state.name[1] = tilt;
		joint_state.position[1] = tilt;
		joint_state.name[2] = periscope;
		joint_state.position[2] = height;


		// update transform
		// (moving in a circle with radius = 2)
		odom_trans.header.stamp = rosTimenow();
		odom_trans.transform.translation.x = cos(angle)2;
		odom_trans.transform.translation.y = sin(angle)2;
		odom_trans.transform.translation.z = .7;
		odom_trans.transform.rotation = tfcreateQuaternionMsgFromYaw(angle + M_PI2);

		// send the joint state and transform
		joint_pub.publish(joint_state);
		broadcaster.sendTransform(odom_trans);

		// Create new robot state
		tilt += tinc;
		if (tilt - .5  tilt0) tinc = -1;
		height += hinc;
		if (height.2  height0) hinc = -1;
		swivel += degree;
		angle += degree4;

		This will adjust as needed per iteration
			loop_rate.sleep();
	}


	return 0;
}
