/*
 * epos_manager.cpp
 *
 *  Created on: Feb 22, 2017
 *      Author: yutak
 */

#include <iostream>
#include <stdio.h>

#include <ros/ros.h>
#include <std_msgs/Float64.h>
#include <sensor_msgs/Joy.h>
#include <epos_library/Definitions.h>

class EposManager {
public:
	EposManager();
	~EposManager();

private:
	void joyCallbackBoom(const std_msgs::Float64ConstPtr& val);
	void joyCallbackArm(const std_msgs::Float64ConstPtr& val);

	ros::NodeHandle n;
	ros::Subscriber sub_joy_boom, sub_joy_arm, sub_joy_bucket, sub_joy_swing;
	void *pHandleBoom, *pHandleArm;
	unsigned short nodeIdBoom;
	unsigned short nodeIdArm;
};

EposManager::EposManager() {
	unsigned int err;
	char *pDeviceName = (char*)"EPOS2";
	char *pProtocolStackName = (char*)"MAXON SERIAL V2";
	char *pInterfaceName = (char*)"USB";
	char *pPortNameBoom = (char*)"USB0";
	char *pPortNameArm = (char*)"USB1";

	nodeIdBoom = 1;
	nodeIdArm = 2;

	pHandleBoom = VCS_OpenDevice(pDeviceName, pProtocolStackName,
			 	 	 	 	 	 pInterfaceName, pPortNameBoom, &err);
	if(err) {
		ROS_INFO("EPOS for Boom OpenDevice Error:0x%8x", err);
	}
	VCS_SetOperationMode(pHandleBoom, nodeIdBoom, OMD_VELOCITY_MODE, &err);
	if(err) {
		ROS_INFO("EPOS for Boom SetOperationMode Error:0x%8x", err);
	}
	VCS_SetEnableState(pHandleBoom, nodeIdBoom, &err);
	if(err) {
		ROS_INFO("EPOS for Boom SetEnableStateError:0x%8x", err);
	}

	pHandleArm = VCS_OpenDevice(pDeviceName, pProtocolStackName,
	 	 	 	 	 	 	 	pInterfaceName, pPortNameArm, &err);
	if(err) {
		ROS_INFO("EPOS for Arm OpenDevice Error:0x%8x", err);
	}
	VCS_SetOperationMode(pHandleArm, nodeIdArm, OMD_VELOCITY_MODE, &err);
	if(err) {
		ROS_INFO("EPOS for Arm SetOperationMode Error:0x%8x", err);
	}
	VCS_SetEnableState(pHandleArm, nodeIdArm, &err);
	if(err) {
		ROS_INFO("EPOS for Arm device set enable state error:0x%8x", err);
	}

	sub_joy_boom = n.subscribe<std_msgs::Float64>(
			"joy_val_boom", 10, &EposManager::joyCallbackBoom, this);
	sub_joy_arm = n.subscribe<std_msgs::Float64>(
			"joy_val_arm", 10, &EposManager::joyCallbackArm, this);
}

EposManager::~EposManager() {
	unsigned int err;

	VCS_SetDisableState(pHandleBoom, nodeIdBoom, &err);
	if(err) {
		ROS_INFO("EPOS for Boom SetDisableState Error:0x%8x", err);
	}

	VCS_SetDisableState(pHandleArm, nodeIdArm, &err);
	if(err) {
		ROS_INFO("EPOS for Arm SetDisableState Error:0x%8x", err);
	}
}

void EposManager::joyCallbackBoom(const std_msgs::Float64ConstPtr& val) {
	unsigned int err;
	long vel = long(val->data * 10.0);

	ROS_INFO("EPOS for Boom velocity must:%d", (int)vel);
	VCS_SetVelocityMust(pHandleBoom, nodeIdBoom, vel, &err);
	if(err) {
		ROS_INFO("EPOS for Boom SetVelocityMust Error:0x%8x", err);
	}
}

void EposManager::joyCallbackArm(const std_msgs::Float64ConstPtr& val) {
	unsigned int err;
	long vel = long(val->data * 10.0);

	ROS_INFO("EPOS for Arm velocity must:%d", (int)vel);
	VCS_SetVelocityMust(pHandleArm, nodeIdArm, vel, &err);
	if(err) {
		ROS_INFO("EPOS for Arm SetVelocityMust Error:0x%8x", err);
	}
}

int main(int argc, char** argv) {
	ros::init(argc, argv, "epos_manager");
	EposManager em;
	ROS_INFO("EPOS Manager started.");

	ros::spin();
}
